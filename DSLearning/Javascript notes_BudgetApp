--------------------------------------- BudgetApp_BluePrint (Using IIFE ) ---------------------------------------

- PAttern of modules :

  var IIFE_fun = ( function(){
    
    //Private
    var x=23;
    
    //Private
    var add = function(a){
        return (x+a) ;
    };
    //Public
    return{
        //Inner function has access to outer function variables even after it is returned(closure)
        publicTest : function(b){   // always return objects properties (which can contain functions )
            return add(b);
        }
    }
})();


- Real life eg :
  
  
//IIFE
//Module pattern
var budgetController = ( function(){
    
    var x=23;
    
    var add = function(a){
        return (x+a) ;
    };
    return{
        //Inner function has access to outer function variables even after it is returned
        publicTest : function(b){
            return add(b);
        }
    }
})();


var UIController = (function(){
    //Some code
})();


var controller = (function(budgetCtrl,UICtrl){
    
    var z=budgetCtrl.publicTest(5);
    
    return {
        anotherPublic : function(){
            
            console.log(z);
        }
    }
    
})(budgetController,UIController);

  --------------------------------------------------- Real project BudgetApp ---------------------------------------------------------------
  
  
  -     
        //How to check whether enter key is pressed , enterKey code is 13 
        // When key is pressed , the function is triggered and if the event is enter , i.e. event.keyCode is 13 , the addBudgetCtlr() is called
        document.addEventListener('keypress' , function(event){
            if (event.keyCode==13){
           addBudgetCtrl() ;
            }
        }) ;
        
        
        
 -  Foreach method :
 	 //Upto 3 arguments allowed in foreach
            //Foreach does not returns anything , it makes changes in the original array , so used when we need to change elements in array
            //forEach() method doesnâ€™t actually return anything (undefined). It simply calls a provided function on each element in your array
            
            data.allItems.exp.forEach(function(current){
                    
                current.calcPercentage(data.totals.inc) ;
                                      }) ;     
        
        
  - Map method :
  	//Map is same as forEach , but it does make changes in the original array , instead it returns the value in the newArrray
            //map() method will also call a provided function on every element in the array. The difference is that map() utilizes return values and actually returns a new Array of the same size.
            
            var percentageArr = data.allItems.exp.map(function(item){
                return item.getPercentage() ;
            }) ;      
        
        
  - .toFixed :
  
    		// .toFixed(n) is used to reduce any number to n decimal no, and convert the result no. into string 
    		
            percentage = (this.value / data.totals.inc  * 100) .toFixed(2) ;     
        
        
        
  - parseFloat(String) :
  
  			//parseFloat(string) is used to convert a string into no.
  			
            percentage = parseFloat(percentage) ;      
      
      
-------------------------------------- Array prototype functions :----------------------------------------------------------------------------

- slice method 
	//The slice() method returns the selected elements in an array, as a new array object.
	//Syntax : var newArr = arr.slice(start , end) ;
					newArr contains elements till end-1
	//No changes made in original array 
        
    // when start or end is negative no. , means that counting of it from end , when -1 means 1st element from the end
    //Eg  :
    
    	var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
		var citrus = fruits.slice(1, 3);
		
		O/P : Orange, Lemon
    	 
        
        
 - splice method :       
       // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice 
       //Changes made in original array(inplace)
       // It is used to add/delete/replace elements in array 
       // when start is negative no. , means that counting of it from end , when -1 means 1st element from the end
       
       
       - syntax: arr.splice (start(optional) , deleteCount , elements to be added/replaced (optional) )
       			
       			Eg : when start is positive -:
       				
       				let myFish = ['angel', 'clown', 'trumpet', 'sturgeon']
					let removed = myFish.splice(0, 2, 'parrot', 'anemone', 'blue')

					//Remove 2 elements from index 0, and insert "parrot", "anemone" and "blue"
					// myFish is ["parrot", "anemone", "blue", "trumpet", "sturgeon"] 
					// removed is ["angel", "clown"]
       			
       				
       
       			Eg : when start is negative - :
       			
       				let myFish = ['angel', 'clown', 'mandarin', 'sturgeon']
					let removed = myFish.splice(-2, 1)
					
					//Remove 1 element from index -2
					// myFish is ["angel", "clown", "sturgeon"] 
					// removed is ["mandarin"]
       
       
       
       
 ---------------------------------------------------------- Imp js concepts (events) -------------------------------------------      
       
   event bubbling , trickling/capturing ,  event delegation    
       
        
        
        
   